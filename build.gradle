buildscript {
    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.9.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
}

apply from: "gradle/publishing.gradle"
apply plugin: 'coveralls'

allprojects {
    apply plugin: "idea"
    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: 'cobertura'
    apply from: "$rootDir/gradle/code-quality.gradle"

    ext.springSecurityVersion   = "3.2.4.RELEASE"
    ext.groovyVersion           = "2.3.3"

    repositories {
        jcenter()
        maven { url 'http://oss.jfrog.org/artifactory/repo' }
    }

    dependencies {
        testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0', {
            exclude module: 'groovy-all'
        }
    }

    cobertura {
        coverageFormats = [ 'xml', 'html' ]
    }

}

def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }
cobertura {
    coverageFormats = [ 'xml', 'html' ]
    coverageMergeDatafiles = files
}
test.dependsOn(subprojects.test)

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

jar.finalizedBy sourceJar

artifacts {
    sourceJar
}

gradle.taskGraph.whenReady {
    if (project.plugins.hasPlugin('groovy')) {
        sourceSets.main.groovy.srcDirs.each    { it.mkdirs() }
        sourceSets.test.groovy.srcDirs.each    { it.mkdirs() }
    } else {
        sourceSets.main.java.srcDirs.each      { it.mkdirs() }
        sourceSets.test.java.srcDirs.each      { it.mkdirs() }
    }
    sourceSets.main.resources.srcDirs.each { it.mkdirs() }
    sourceSets.test.resources.srcDirs.each { it.mkdirs() }
}
